YΣ02 Τεχνητή Νοημοσύνη: Εργασία 0

Παναγιώτα Γύφτου,     Α.Μ. 1115201900318




					          ----------------------------------------------
                                                                1ο μέρος εργασίας    
					       	  ----------------------------------------------

- addition.py: Η add() προσθέτει τις μεταβλητές που δέχεται ως όρισμα και επιστρέφει το αποτέλεσμα της πράξης.

- buyLotsOfFruit.py:  Η buyLotsOfFruit() για κάθε στοιχείο της λίστας αγοράς αρχικά εξετάζει αν υπάρχει στον κατάλογο τιμών, αν υπάρχει το προϊόν τότε                             προσθέτει την τελική του τιμή στο τελικό κόστος αλλιώς ενημερώνει τον χρήστη ότι αυτό το στοιχείο της λίστας δεν υπάρχει.Τέλος                       	      επιστρέφει το συνολικό κόστος των αγορών.  

- shopSmart.py:  Η shopSmart() εξετάζει ένα ένα τα καταστήματα, αποθηκεύει το κόστος από το πρώτο κατάστημα που εξετάζει σε μια μεταβλητή minimum_cost και 		         το κατάστημα σε μια μεταβλητή bestFrShop.Στο επόμενο κατάστημα προς εξέταση συγκρίνει την τιμή κόστους των αγορών του με την μεταβλητή                       minimum_cost.Εάν το τρέχον κατάστημα είναι πιο φθηνό τότε η τιμή της minimum_cost αλλάζει με αυτή του κόστους του τρέχοντος καταστήματος                     και αντίστοιχα η τιμή bestFrShop αλλάζει με το τρέχον κατάστημα.Όταν ολοκληρωθεί ο έλεγχος όλων των φρουτοπωλείων τότε η συνάρτηση                           επιστρέφει το κατάστημα το οποίο είναι το πιο οικονομικό για τις αγορές. 
		 *Σημείωση: Ο υπολογισμός του συνολικού κόστους των αγορών γινεται με την βοήθεια της μεθόδου getPriceOfOrder της κλάσης FruitShop που 			                    βρίσκεται στο αρχείο shop.py.



					          ----------------------------------------------
                                                                2ο μέρος εργασίας    
					       	  ----------------------------------------------


1. Εντολή μεταγλώττισης και εκτέλεσης του προγράμματος: python priorityQueue.py

2. -Περιγραφή Προγράμματος:


Στο τέλος του κύριου κώδικα της άσκησης έχω προσθέσει τη συνάρτηση if __name___main__ όπου εκεί τεστάρω όλες τις μεθόδους της κλάσης PriorityQueue καθώς και
τη συνάρτηση PQSort().Στην main υλοποιώ 2 τεστ, το πρώτο τεστ αρχικά φτιάχνει μια ουρά προτεραιότητας, στην οποία προστίθενται διάφορα στοιχεία.Σε αυτό το σημείο εξετάζω και την περίπτωση όπου εισέρχεται στην ουρά στοιχείο το οποίο υπάρχει ήδη σε αυτήν (δηλ. στοιχείο με την ίδια προτεραιότητα και το ίδιο item), απορρίπτοντας έτσι το αίτημα να εισέλθει σε αυτήν.Στην συνέχεια γίνονται διάφορα update όπου και εκεί εξετάζεται η τυχόν δημιουργία διπλότυπου/ων στοιχείου/ων, έπειτα γίνονται pop() ένα ένα τα στοιχεία της ουράς προτεραιότητας και αφού αδειάσει, γίνεται ένα ακόμη αίτημα αφαίρεσης του μικρότερου στοιχείου προτεραιότητας ώστε να εξεταστεί πως ανταπεξέρχεται η αντίστοιχη μέθοδος σε αυτήν την κατάσταση.Τέλος υπάρχει ένα τεστ της λειτουργίας της PQSort, όπου δημιουργείται μια μη ταξινομημένη λίστα με θετικούς ακέραιους αριθμούς η οποία εισάγεται ως όρισμα στην PQSort.Η PQSort με την σειρά της επιστρέφει στον χρήστη την λίστα ταξινομημένη.Το δεύτερο τεστ είναι αυτό που βρίσκεται στην εκφώνηση της εργασίας.


- push: Η μέθοδος push αρχικά ψάχνει αν στην ουρά προτεραιότητας υπάρχει το στοιχείο εξέτασης που εισήγαγε ο χρήστης ως όρισμα, δηλαδή αν υπάρχει στοιχείο           στην ουρά με την ίδια προτεραιότητα και το ίδιο item. Για να αποφευχθεί η διπλή εγγραφή, αν υπάρχει πανομοιότυπο στοιχείο τότε η ενέργεια της                προσθήκης δεν γίνεται και ο χρήστης ενημερώνεται με σχετικό μήνυμα.Διαφορετικά το στοιχείο εξέτασης εισέρχεται στην ουρά.

- pop:  Η pop αρχικά στο σώμα της εξετάζει με την βοήθεια της isEmpty() αν η ουρά είναι κενή.Εάν η ουρα είναι κενή η ενέργεια της αφαίρεσης δεν μπορεί να            επιτευχθεί, έτσι η μέθοδος ενημερώνει τον χρήστη με σχετικό μήνυμα, αλλιώς αφαιρεί από την priority queue το στοιχείο με την μικρότερη προτεραιότητα         και το επιστρέφει στον χρήστη.

- isEmpty: Η μέθοδος αυτή ελέγχει με την βοήθεια του μετρητή count αν η ουρά είναι κενή ή όχι.

- update: Η μέθοδος update αρχικά ελέγχει ένα ένα στοιχείο της ουράς και αν βρει στοιχείο με το ίδιο item της εξέτασης τότε συγκρίνει αν η προτεραιότητα του 	  είναι μεγαλύτερη της προτεραιότητας εξέτασης και αν ισχύει αυτή η υπόθεση τότε η τιμή της προτεραιότητας του στοιχείου αλλάζει και θέτετε η τιμή             της προτεραιότητας εξέτασης (που είναι η μικρότερη τιμή).Αφού εξεταστούν και τροποποιηθούν τα κατάλληλα στοιχεία τότε σε δεύτερη φάση γίνεται                έλεγχος της ουράς για διπλότυπα στοιχεία (δηλ. με ίδια προτεραιότητα και ίδιο item) μετα την ενημέρωση της, αν υπάρχουν κρατάμε το πρώτο εκ των 	          οποίων και τα υπόλοιπα τα σβήνουμε από την ουρά.Στην περίπτωση που η ουρά προτεραιότητας δεν περιέχει κάποιο στοιχείο ίδιο με το item εξέτασης 	          τότε προσθέτουμε το στοιχείο εξέτασης στην ουρά. 

- PQSort: Στην αρχή του σώματος της, δημιουργεί ένα priority queue, στο οποίο εν συνεχεία προσθέτει ένα ένα τα στοιχεία της λίστας που έχει λάβει ως           	  όρισμα.Διαγράφει όλα τα στοιχεία της λίστας και την γεμίζει ξανά κάνοντας διαδοχικά pop από την ουρά, έτσι γεμίζει κατά αύξουσα σειρά με           	  ταξινομημένα στοιχεία και τέλος επιστρέφεται στον χρήστη τροποποιημένη.
